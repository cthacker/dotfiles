#
# Executes commands at the start of an interactive session.
#

# === Core Zsh Configuration === #

# History settings
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt appendhistory
setopt hist_expire_dups_first
setopt hist_ignore_dups
setopt hist_ignore_space
setopt hist_verify
setopt share_history

# Basic auto/tab completion
autoload -Uz compinit
compinit -u
# Standard tab completion setup
zstyle ':completion:*' completer _expand _complete _ignored _approximate
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' menu select=2
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' special-dirs true # Complete . and .. special directories
setopt AUTO_PARAM_SLASH # add slash when completing directories
unsetopt COMPLETE_ALIASES # completes alias as the real command

# Useful options
setopt auto_cd
setopt extended_glob
setopt nomatch
setopt notify
setopt prompt_subst

# === Plugins === #

# zsh-autosuggestions
if [ -f /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
  source /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh
elif [ -f /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
  source /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh
fi

# zsh-syntax-highlighting (must be at the end of .zshrc)
if [ -f /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; then
  source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
elif [ -f /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; then
  source /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

# === Alias Definitions === #

# OS detection
if [[ "$OSTYPE" == "darwin"* ]]; then
  export MACOS=true
else
  export MACOS=false
fi

# Common aliases
alias gla='git log --pretty=oneline --abbrev-commit'
alias vim='nvim'

# Modern replacements
if command -v bat &> /dev/null; then
  alias cat='bat'
fi

if command -v eza &> /dev/null; then
  alias ls='eza'
  alias ll='eza -l -snew'
  alias la='eza -la'
  alias lt='eza -T' # Tree listing
  alias lrt='eza -lh --sort=modified'

else
  # OS-specific ls aliases
  if [[ "$MACOS" == true ]]; then
    alias ls='ls -G'
  else
    alias ls='ls --color=auto'
  fi
  alias ll='ls -l'
  alias la='ls -la'
fi

# Git aliases
alias gs='git status'
alias gws='git status --short'
alias gc='git commit'
alias gca='git commit --amend'
alias gp='git push'
alias gl='git pull'
alias glo='git log --oneline --decorate'
alias gla='git log --pretty=oneline --abbrev-commit'
alias gls='git log --stat'
alias ga='git add'
alias gaa='git add --all'
alias gd='git diff'
alias gds='git diff --staged'
alias gb='git branch'
alias gba='git branch -a'
alias gco='git checkout'
alias gcb='git checkout -b'
alias gfa='git fetch --all'
alias gpr='git pull --rebase'
alias gcR='git reset "HEAD^"'
alias gss='git stash save'
alias gsp='git stash pop'
alias gsl='git stash list'


# Docker aliases
alias dockerclean='docker rmi $(docker images -f "dangling=true" -q); docker volume rm $(docker volume ls -qf dangling=true)'

# Increase max open files for macOS
if [[ "$MACOS" == true ]]; then
  ulimit -n 2048
fi

# === Path Configuration === #

# Add local bin directories to PATH
export PATH="$HOME/.local/bin:$PATH"

# Homebrew
if [[ "$MACOS" == true ]]; then
  if [ -f "/opt/homebrew/bin/brew" ]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
  elif [ -f "/usr/local/bin/brew" ]; then
    eval "$(/usr/local/bin/brew shellenv)"
  fi
fi

# Google Cloud SDK path - OS specific
if [[ "$MACOS" == true ]]; then
  # macOS path
  if [ -f "$HOME/google-cloud-sdk/path.zsh.inc" ]; then
    source "$HOME/google-cloud-sdk/path.zsh.inc"
  fi
  if [ -f "$HOME/google-cloud-sdk/completion.zsh.inc" ]; then
    source "$HOME/google-cloud-sdk/completion.zsh.inc"
  fi
else
  # Linux path
  if [ -f '/home/cameron/Downloads/google-cloud-sdk/path.zsh.inc' ]; then
    source '/home/cameron/Downloads/google-cloud-sdk/path.zsh.inc'
  fi
  if [ -f '/home/cameron/Downloads/google-cloud-sdk/completion.zsh.inc' ]; then
    source '/home/cameron/Downloads/google-cloud-sdk/completion.zsh.inc'
  fi
fi

# FZF
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Yarn bin path
export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

# Cargo bin path (for Rust packages like eza)
[ -f "$HOME/.cargo/env" ] && source "$HOME/.cargo/env"

# Conda initialize - OS specific
if [[ "$MACOS" == true ]]; then
  # macOS Conda setup
  if [ -f "$HOME/miniconda3/bin/conda" ]; then
    __conda_setup="$("$HOME/miniconda3/bin/conda" 'shell.zsh' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
      eval "$__conda_setup"
    else
      if [ -f "$HOME/miniconda3/etc/profile.d/conda.sh" ]; then
        . "$HOME/miniconda3/etc/profile.d/conda.sh"
      else
        export PATH="$HOME/miniconda3/bin:$PATH"
      fi
    fi
    unset __conda_setup
  fi
else
  # Linux Conda setup
  if [ -f "/home/cameron/miniconda3/bin/conda" ]; then
    __conda_setup="$('/home/cameron/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
      eval "$__conda_setup"
    else
      if [ -f "/home/cameron/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/home/cameron/miniconda3/etc/profile.d/conda.sh"
      else
        export PATH="/home/cameron/miniconda3/bin:$PATH"
      fi
    fi
    unset __conda_setup
  fi
fi

# === Keybindings === #
bindkey -e  # Use emacs key bindings

# Position cursor at the end of line when using up/down arrows for history
bindkey '^[[A' up-line-or-history       # Up arrow
bindkey '^[[B' down-line-or-history     # Down arrow
autoload -U history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^[[A" history-beginning-search-backward-end  # Up arrow - search history backwards
bindkey "^[[B" history-beginning-search-forward-end   # Down arrow - search history forwards

# Fix key bindings
if [[ "$MACOS" == true ]]; then
  bindkey "^[[H" beginning-of-line
  bindkey "^[[F" end-of-line
  bindkey "^[[3~" delete-char
else
  bindkey "^[[1~" beginning-of-line
  bindkey "^[[4~" end-of-line
  bindkey "^[[3~" delete-char
fi

# Add additional functions
# fd - Find directories
fd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune -o -type d -print 2> /dev/null | fzf +m) && cd "$dir"
}

# === Additional Functions === #

# Git functions
# Delete branches that have been merged into main/master
git_clean_branches() {
  local main_branch="main"
  if ! git show-ref --quiet refs/heads/main; then
    main_branch="master"
  fi

  echo "Cleaning branches merged into $main_branch..."
  git branch --merged $main_branch | grep -v "\* $main_branch" | xargs -n 1 git branch -d
  echo "Done!"
}

# Interactively add file parts
git_add_interactive() {
  git add -p $@
}

# Show git log with a graph view
git_log_graph() {
  git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
}

# Add aliases for the functions
alias gclean='git_clean_branches'
alias gai='git_add_interactive'
alias glg='git_log_graph'

# === Python Virtual Environment Indicator === #
# Add virtualenv indicator to the prompt
show_virtual_env() {
  if [ -n "$VIRTUAL_ENV" ]; then
    echo "(🐍 $(basename $VIRTUAL_ENV)) "
  fi
}

# Set up a simple prompt with virtualenv indicator
export VIRTUAL_ENV_DISABLE_PROMPT=1
setopt PROMPT_SUBST

# Only use this custom prompt if Starship isn't active
if [ -z "$STARSHIP_SHELL" ]; then
  export PS1='$(show_virtual_env)%F{cyan}%~%f %F{green}❯%f '
fi

# === Initialize Starship Prompt === #
if command -v starship &> /dev/null; then
  # Create a custom prompt command that prepends the virtualenv
  starship_prompt_cmd() {
    # Get virtualenv indicator
    venv_info="$(show_virtual_env)"

    # Get the standard Starship prompt
    PS1="$venv_info$(starship prompt)"
  }

  # Use precmd to set the prompt
  precmd_functions+=(starship_prompt_cmd)

  # Initialize Starship
  eval "$(starship init zsh --print-full-init | grep -v 'precmd_functions+=(starship_precmd)')"
else
  echo "Starship is not installed. Please install it: https://starship.rs"
fi

eval "$(uv generate-shell-completion zsh)"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# pnpm
export PNPM_HOME="/Users/cameronthacker/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end
